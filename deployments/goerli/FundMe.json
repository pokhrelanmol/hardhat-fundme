{
  "address": "0x735aEb625297Fb4D00632F1424cA5491fE9d063e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x69251abf91365c1afefa435b384e7468acf8d0f3c370e9c46b2aa432951ee579",
  "receipt": {
    "to": null,
    "from": "0x0B00724e15F6BF596F42908598EEf7C6a089233E",
    "contractAddress": "0x735aEb625297Fb4D00632F1424cA5491fE9d063e",
    "transactionIndex": 48,
    "gasUsed": "1039882",
    "logsBloom": "0x
    "blockHash": "0x8f1884bce6bc81d67b3bc91bf126c57eb8ed15fa723bdcbac55eb05d92522444",
    "transactionHash": "0x69251abf91365c1afefa435b384e7468acf8d0f3c370e9c46b2aa432951ee579",
    "logs": [],
    "blockNumber": 7656667,
    "cumulativeGasUsed": "12951397",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "8bd1604f206f339e98019156cd1c7296",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Anmol pokhrel\",\"details\":\"this implement price feed as our library \",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe contract is for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw()\":{\"notice\":\"this functions withdraws the eth from the contract\"}},\"notice\":\"this contract is to demo the crowd funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// error codes\\nerror FundMe__NotOwner();\\n\\n// interface,library,contracts\\n\\n/**@title FundMe contract is for crowd funding\\n * @author Anmol pokhrel\\n * @notice this contract is to demo the crowd funding contract\\n * @dev this implement price feed as our library \\n\\n */\\ncontract FundMe {\\n    // contract deployement cost\\n    // gas cost with contant and immutable = 751682\\n    // gas cost without = 793959\\n\\n    // Type declaration\\n    // we are using uint256 as first parameter\\n    using PriceConverter for uint256;\\n\\n    //state variables\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    // gas with constant = 21415(cheaper)\\n    // without constan=  23515\\n    address[] private s_funders; //s_ denotes storage varibale\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        //\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n        //  underscore below the require runs the require statement first and then code\\n        //  underscore above will do vise-versa\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    //  what happens of someone send eth to this contract without calling fund function?\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // functions\\n    function fund() public payable {\\n        // want to able to set minimum fund amount in usd\\n        // 1. how to send eth to this contract\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        ); //1e18 == 1 * 10 ** 18 == 100000000000000000 wei == 1 eth\\n        // msg.value will be the first parameter of getConversionRate.\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n        // what is revert?\\n        // undo any action before and send remaining gas back\\n    }\\n\\n    /** @notice this functions withdraws the eth from the contract\\n     */\\n    function withdraw() public onlyOwner {\\n        /** @dev reset values after withdraw */\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        /** @dev this is the way to reset the array\\n         */\\n        s_funders = new address[](0);\\n\\n        // second return type of call is bytes data we dont need it here so ignoring\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"eth trasfer failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        // in above function we were reading from storage which is expensive but here we are reading from memory which is cheaper\\n        address[] memory funders = s_funders;\\n        uint256 funderCount = funders.length;\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funderCount;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"eth trasfer failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n}\\n\",\"keccak256\":\"0xb1e776fba2728224cc6bfbaa26cee67a09bbb626fccdd458ac6d8ea64b61bb8f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n\\nlibrary PriceConverter {\\n\\n      function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\\n        // ABI\\n        // address =>   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e (rinkeby)\\n\\n\\n    (,int256 answer,,,\\n      // latestRounddata() returns many thing but we only need answer/price so we are deleting those value and leaving commas instead\\n      )=priceFeed.latestRoundData();\\n\\n    //   answer is price of eth interms of USD\\n    // 3000.00000000\\n\\n    // below code matches the decimal points and type cast int256 to uint256\\n    // because we are getting msg.value as uint256 and answer as int256\\n\\n    \\n    return uint256(answer * 1e10); // 1**10 = 10000000000 \\n    // lets solve the maths \\n    // suppose 1 eth == 3000 usd \\n    // we will get 300000000000 as answer\\n    // the to match the decimal point with eth we do answer * 1e10 i.e 10000000000 \\n    // final return value will be 3000000000000000000000\\n    }\\n\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\\n     \\n     uint256 ethPrice = getPrice(priceFeed);\\n    // lets solve the maths\\n    //  ethPrice = 3000_000000000000000000\\n    // 1 eth is send so ethAmount = 1_000000000000000000 wei\\n     uint256 ethAmountInUsd = (ethPrice * ethAmount)/1e18;\\n     return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xd001651b436190c5e91a5a03796d6298a10cfb591fb8f86e4b52db0f26926710\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012eb380380620012eb83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051611172620001796000396000818161039b015281816105ea015261063a01526111726000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b00565b61032a565b6040516100d79190610b46565b60405180910390f35b3480156100ec57600080fd5b506100f5610373565b6040516101029190610bc0565b60405180910390f35b34801561011757600080fd5b50610120610399565b005b34801561012e57600080fd5b506101376105d9565b6040516101449190610b46565b60405180910390f35b34801561015957600080fd5b506101626105e6565b60405161016f9190610bea565b60405180910390f35b34801561018457600080fd5b5061018d61060e565b60405161019a9190610bc0565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c2610638565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c31565b6108e2565b6040516101f89190610bea565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092990919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610cbb565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104c957600080828154811061044357610442610cdb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c190610d39565b915050610421565b50600067ffffffffffffffff8111156104e5576104e4610d82565b5b6040519080825280602002602001820160405280156105135781602001602082028036833780820191505090505b50600090805190602001906105299291906109f6565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055090610de2565b60006040518083038185875af1925050503d806000811461058d576040519150601f19603f3d011682016040523d82523d6000602084013e610592565b606091505b50509050806105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610e43565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561074057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106f6575b5050505050905060008151905060005b818110156107d057600083828151811061076d5761076c610cdb565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107c890610d39565b915050610750565b50600067ffffffffffffffff8111156107ec576107eb610d82565b5b60405190808252806020026020018201604052801561081a5781602001602082028036833780820191505090505b50600090805190602001906108309291906109f6565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161085790610de2565b60006040518083038185875af1925050503d8060008114610894576040519150601f19603f3d011682016040523d82523d6000602084013e610899565b606091505b50509050806108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490610e43565b60405180910390fd5b505050565b60008082815481106108f7576108f6610cdb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061093583610965565b90506000670de0b6b3a7640000858361094e9190610e63565b6109589190610eec565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190610faa565b5050509150506402540be400816109ee9190611025565b915050919050565b828054828255906000526020600020908101928215610a6f579160200282015b82811115610a6e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a16565b5b509050610a7c9190610a80565b5090565b5b80821115610a99576000816000905550600101610a81565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acd82610aa2565b9050919050565b610add81610ac2565b8114610ae857600080fd5b50565b600081359050610afa81610ad4565b92915050565b600060208284031215610b1657610b15610a9d565b5b6000610b2484828501610aeb565b91505092915050565b6000819050919050565b610b4081610b2d565b82525050565b6000602082019050610b5b6000830184610b37565b92915050565b6000819050919050565b6000610b86610b81610b7c84610aa2565b610b61565b610aa2565b9050919050565b6000610b9882610b6b565b9050919050565b6000610baa82610b8d565b9050919050565b610bba81610b9f565b82525050565b6000602082019050610bd56000830184610bb1565b92915050565b610be481610ac2565b82525050565b6000602082019050610bff6000830184610bdb565b92915050565b610c0e81610b2d565b8114610c1957600080fd5b50565b600081359050610c2b81610c05565b92915050565b600060208284031215610c4757610c46610a9d565b5b6000610c5584828501610c1c565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ca5601b83610c5e565b9150610cb082610c6f565b602082019050919050565b60006020820190508181036000830152610cd481610c98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4482610b2d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7757610d76610d0a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dcc600083610db1565b9150610dd782610dbc565b600082019050919050565b6000610ded82610dbf565b9150819050919050565b7f6574682074726173666572206661696c65640000000000000000000000000000600082015250565b6000610e2d601283610c5e565b9150610e3882610df7565b602082019050919050565b60006020820190508181036000830152610e5c81610e20565b9050919050565b6000610e6e82610b2d565b9150610e7983610b2d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb257610eb1610d0a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef782610b2d565b9150610f0283610b2d565b925082610f1257610f11610ebd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3c81610f1d565b8114610f4757600080fd5b50565b600081519050610f5981610f33565b92915050565b6000819050919050565b610f7281610f5f565b8114610f7d57600080fd5b50565b600081519050610f8f81610f69565b92915050565b600081519050610fa481610c05565b92915050565b600080600080600060a08688031215610fc657610fc5610a9d565b5b6000610fd488828901610f4a565b9550506020610fe588828901610f80565b9450506040610ff688828901610f95565b935050606061100788828901610f95565b925050608061101888828901610f4a565b9150509295509295909350565b600061103082610f5f565b915061103b83610f5f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107a57611079610d0a565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110b7576110b6610d0a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110f4576110f3610d0a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113157611130610d0a565b5b82820290509291505056fea2646970667358221220dc27d36a3f969b5bf2c265b39e027667b4574554568d3198a7f6289cc2bd67a564736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b00565b61032a565b6040516100d79190610b46565b60405180910390f35b3480156100ec57600080fd5b506100f5610373565b6040516101029190610bc0565b60405180910390f35b34801561011757600080fd5b50610120610399565b005b34801561012e57600080fd5b506101376105d9565b6040516101449190610b46565b60405180910390f35b34801561015957600080fd5b506101626105e6565b60405161016f9190610bea565b60405180910390f35b34801561018457600080fd5b5061018d61060e565b60405161019a9190610bc0565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c2610638565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c31565b6108e2565b6040516101f89190610bea565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092990919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610cbb565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104c957600080828154811061044357610442610cdb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c190610d39565b915050610421565b50600067ffffffffffffffff8111156104e5576104e4610d82565b5b6040519080825280602002602001820160405280156105135781602001602082028036833780820191505090505b50600090805190602001906105299291906109f6565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055090610de2565b60006040518083038185875af1925050503d806000811461058d576040519150601f19603f3d011682016040523d82523d6000602084013e610592565b606091505b50509050806105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610e43565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561074057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106f6575b5050505050905060008151905060005b818110156107d057600083828151811061076d5761076c610cdb565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107c890610d39565b915050610750565b50600067ffffffffffffffff8111156107ec576107eb610d82565b5b60405190808252806020026020018201604052801561081a5781602001602082028036833780820191505090505b50600090805190602001906108309291906109f6565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161085790610de2565b60006040518083038185875af1925050503d8060008114610894576040519150601f19603f3d011682016040523d82523d6000602084013e610899565b606091505b50509050806108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490610e43565b60405180910390fd5b505050565b60008082815481106108f7576108f6610cdb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061093583610965565b90506000670de0b6b3a7640000858361094e9190610e63565b6109589190610eec565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190610faa565b5050509150506402540be400816109ee9190611025565b915050919050565b828054828255906000526020600020908101928215610a6f579160200282015b82811115610a6e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a16565b5b509050610a7c9190610a80565b5090565b5b80821115610a99576000816000905550600101610a81565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acd82610aa2565b9050919050565b610add81610ac2565b8114610ae857600080fd5b50565b600081359050610afa81610ad4565b92915050565b600060208284031215610b1657610b15610a9d565b5b6000610b2484828501610aeb565b91505092915050565b6000819050919050565b610b4081610b2d565b82525050565b6000602082019050610b5b6000830184610b37565b92915050565b6000819050919050565b6000610b86610b81610b7c84610aa2565b610b61565b610aa2565b9050919050565b6000610b9882610b6b565b9050919050565b6000610baa82610b8d565b9050919050565b610bba81610b9f565b82525050565b6000602082019050610bd56000830184610bb1565b92915050565b610be481610ac2565b82525050565b6000602082019050610bff6000830184610bdb565b92915050565b610c0e81610b2d565b8114610c1957600080fd5b50565b600081359050610c2b81610c05565b92915050565b600060208284031215610c4757610c46610a9d565b5b6000610c5584828501610c1c565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ca5601b83610c5e565b9150610cb082610c6f565b602082019050919050565b60006020820190508181036000830152610cd481610c98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4482610b2d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7757610d76610d0a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dcc600083610db1565b9150610dd782610dbc565b600082019050919050565b6000610ded82610dbf565b9150819050919050565b7f6574682074726173666572206661696c65640000000000000000000000000000600082015250565b6000610e2d601283610c5e565b9150610e3882610df7565b602082019050919050565b60006020820190508181036000830152610e5c81610e20565b9050919050565b6000610e6e82610b2d565b9150610e7983610b2d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb257610eb1610d0a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef782610b2d565b9150610f0283610b2d565b925082610f1257610f11610ebd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3c81610f1d565b8114610f4757600080fd5b50565b600081519050610f5981610f33565b92915050565b6000819050919050565b610f7281610f5f565b8114610f7d57600080fd5b50565b600081519050610f8f81610f69565b92915050565b600081519050610fa481610c05565b92915050565b600080600080600060a08688031215610fc657610fc5610a9d565b5b6000610fd488828901610f4a565b9550506020610fe588828901610f80565b9450506040610ff688828901610f95565b935050606061100788828901610f95565b925050608061101888828901610f4a565b9150509295509295909350565b600061103082610f5f565b915061103b83610f5f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107a57611079610d0a565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110b7576110b6610d0a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110f4576110f3610d0a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113157611130610d0a565b5b82820290509291505056fea2646970667358221220dc27d36a3f969b5bf2c265b39e027667b4574554568d3198a7f6289cc2bd67a564736f6c634300080b0033",
  "devdoc": {
    "author": "Anmol pokhrel",
    "details": "this implement price feed as our library ",
    "kind": "dev",
    "methods": {},
    "title": "FundMe contract is for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw()": {
        "notice": "this functions withdraws the eth from the contract"
      }
    },
    "notice": "this contract is to demo the crowd funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}